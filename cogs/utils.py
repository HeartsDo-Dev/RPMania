#    Greysario Manager - A Discord Bot for roleplay server
#    Copyright (C) 2O19 HeartsDo
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.


import discord
from discord.ext import commands
import json
import urllib
from xml.etree import ElementTree as ET
import logging
from phabricator import Phabricator

class Utils(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        with open('config.json', 'r') as fichier:
            self.config = json.load(fichier)
        self.phab = Phabricator(host=self.config['phab']['host'], token=self.config['phab']['token'])
        self.phab.update_interfaces()


    @commands.command()
    @commands.cooldown(50, 30, commands.BucketType.default)
    async def nation(self, ctx):
        '''Affiche la nation de Greysario, la ville du serveur (En Anglais)'''
        nation = "greysario"
        requestURL = 'https://www.nationstates.net/cgi-bin/api.cgi?nation=' \
                     + nation
        root = ET.parse(urllib.request.urlopen(requestURL)).getroot()
        logging.info(root)
        name = root.find('NAME').text
        category = root.find('CATEGORY').text
        unstatus = root.find('UNSTATUS').text
        motto = root.find('MOTTO').text
        flag = root.find('FLAG').text
        animal = root.find('ANIMAL').text
        money = root.find('CURRENCY').text
        dc = root.find('FREEDOM/CIVILRIGHTS').text
        ecom = root.find('FREEDOM/ECONOMY').text
        lp = root.find('FREEDOM/POLITICALFREEDOM').text
        embed=discord.Embed(title=category, color=0x0080ff)
        embed.set_author(name=name)
        embed.set_thumbnail(url=flag)
        embed.add_field(name="Position dans la WA", value=unstatus, inline=True)
        embed.add_field(name="Devise", value=motto, inline=True)
        embed.add_field(name="Animal", value=animal, inline=True)
        embed.add_field(name="Monnaie", value=money, inline=True)
        embed.add_field(name="Droits civiques", value=dc, inline=True)
        embed.add_field(name="Economie", value=ecom, inline=True)
        embed.add_field(name="Liberté politique", value=lp, inline=True)
        embed.set_footer(text="Generated by the NationStates API -- https://www.nationstates.net")
        await ctx.send(embed=embed)

    @commands.command()
    @commands.cooldown(50, 30, commands.BucketType.default)
    async def region(self, ctx):
        '''Affiche la région de Greysario, la ville du serveur (En Anglais)'''
        region = "the_south_pacific"
        requestURL = 'https://www.nationstates.net/cgi-bin/api.cgi?region=' \
                         + region
        root = ET.parse(urllib.request.urlopen(requestURL)).getroot()
        logging.info(root)
        name = root.find("NAME").text
        numnations = root.find("NUMNATIONS").text
        delegate = root.find("DELEGATE").text
        votedelegate = root.find("DELEGATEVOTES").text
        founder = root.find("FOUNDER").text
        power = root.find("POWER").text
        flag = root.find("FLAG").text
        if founder == "0":
            founder = "Pays sans fondateur, probablement une région crée par le jeu"
        embed=discord.Embed(title="La region du pays de Greysario", color=0x0080ff)
        embed.set_author(name=name)
        embed.set_thumbnail(url=flag)
        embed.add_field(name="Nombres de nations dans la région", value=str(numnations), inline=True)
        embed.add_field(name="Delegué de la WA dans la région", value=delegate, inline=True)
        embed.add_field(name="Nombre de soutiens du délégue", value=str(votedelegate), inline=True)
        embed.add_field(name="Fondateur de la région", value=founder, inline=True)
        embed.add_field(name="Influence de la région", value=power, inline=True)
        embed.set_footer(text="Generated by the NationStates API -- https://www.nationstates.net")
        await ctx.send(embed=embed)



    @commands.command()
    async def suggest(self, ctx, cat:str="None", *, name:str="None"):
        '''Permet de mettre une suggestion sur un des boards Phabricator du serveur'''
        if cat == "None":
            return await ctx.send("Tu veut que je l'envoie où: server ou bot, à toi de voir je t'attend !")
        if name == "None":
            return await ctx.send("Votre message ne contient pas un nom, je vais pas créer un ticket pour 0 idée.")
        if cat == "server":
            try:
                respond = [
                    {
                        "type": "title",
                        "value": name
                    },
                    {
                        "type": "description",
                        "value": "Demandée par {}#{}".format(ctx.author.name, ctx.author.discriminator)
                    },
                    {
                        "type": "projects.add",
                        "value": self.config['phab']['arrivals']
                    }
                ]
                self.phab.maniphest.edit(transactions=respond)
            except APIError:
                return await ctx.send("Erreur de l'API, merci de contacter l'administrateur du bot !")
            return await ctx.send("Votre suggestion pour le serveur à été transmis sur Phabricator, merci !")
        if cat == "bot":
            try:
                respond = [
                    {
                        "type": "title",
                        "value": name
                    },
                    {
                        "type": "description",
                        "value": "Demandée par {}#{}".format(ctx.author.name, ctx.author.discriminator)
                    },
                    {
                        "type": "projects.add",
                        "value": self.config['phab']['arrivalb']
                    }
                ]
                self.phab.maniphest.edit(transactions=respond)
            except APIError:
                return await ctx.send("Erreur de l'API, merci de contacter l'administrateur du bot !")
            return await ctx.send("Votre suggestion pour le bot à été transmis sur Phabricator, merci !")
        else:
            return await ctx.send("Alors c'est bien de me dire où mais si je connais pas je connais pas :shrug: ! (server ou bot)")



def setup(bot):
    bot.add_cog(Utils(bot))
